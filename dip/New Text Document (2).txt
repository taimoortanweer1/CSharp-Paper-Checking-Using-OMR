using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.OleDb;
namespace dipdip
{
    public partial class Form1 : Form
    {
        int no_of_circles = 0;
        double rad = 6;
        int centers_found;
        Bitmap bit3;
        int[,] centers = new int[1500,2];
        int[,] centers_final = new int[800, 2];
        public Form1()
        {
            InitializeComponent();
        }


        public Boolean isblack(int x, int y)
        {
          //  Image im3 = pictureBox1.Image;
          ////  im3 = resize(im3);
          //  bit3 = new Bitmap(im3);
            
          //  Color col2 = bit3.GetPixel(x, y);

          //  if ( col2.R < 15 && col2.B <= 15 && col2.G <= 15 )
          //  {
          //      return true;
          //  }
          //  else
          //      return false;
            return true;
        }

        public int finding_filled_circles(int x, int y)
        {
      
            double radius;
            // int j = 1;
            float v = 0, b = 0;
            //rad = float.Parse(textBox2.Text);
            for (double t = 0; t < rad; t += 0.5)
            {
                radius = t;
                for (int i = 0; i < 360; i += 1)
                {
                    double angle = i * System.Math.PI / 180;
                    int p = (int)(x + radius * System.Math.Cos(angle));
                    int q = (int)(y + radius * System.Math.Sin(angle));
                    if ( p <= 0 || q <= 0 || q>=bit3.Height || p>=bit3.Width )
                    {
                        continue;
                    }
                    Color col2 = bit3.GetPixel(p , q);
                    //try
                    {
                        if (col2.R < 10 && col2.B < 10 && col2.G < 10 /*isblack(p, q)*/)          // v shows black points 
                            v += 1;
                    }
                    // catch { }                // b covers all points
                    b += 1;
                }
            }

            float n;
            n = (v / b)*100;
            if (n >= 96)
                return 1;
            else
                return 0;

            
            //MessageBox.Show(v.ToString() + "," + b.ToString());
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            int x, y;
            var mouseArgs = (MouseEventArgs)e;

            x = mouseArgs.X;
            y = mouseArgs.Y;

            richTextBox1.Text = x.ToString() + "," + y.ToString() + "\n";

        }

        private void button6_Click(object sender, EventArgs e)          //finding all circles
        {
            int  p;
            centers_found = 0;
            int a = 0, b = 0;
            Image im3 = pictureBox1.Image;
             bit3 = new Bitmap(im3);
             int x, y,m=60 ,n=150;  //m=60 n=150
             //for (b=0; b<5; b++ )
             //{
                 
                 for (y = 469; y < 769; y++)        // y<769
                 {
                     for (x = m; x < n; x++)
                     {
                         Color col2 = bit3.GetPixel(x, y);
                         if (col2.R < 10 && col2.B < 10 && col2.G < 10)
                         {
                             p = finding_filled_circles(x, y);
                             if (p == 1)
                             {
                                 centers_found++;
                                 centers[a, 0] = x;
                                 centers[a, 1] = y;
                                 //listBox1.Items.Add(x.ToString() + "," + y.ToString());
                                 listBox1.Items.Add(centers[a, 0] + "," + centers[a, 1]);
                                 a++;
                             }
                         }
                     }

                 //}

                 //m = n + 20;
                 //n = n + 110;

             }

            MessageBox.Show(centers_found.ToString());

        }


        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {
            panel1.AutoScroll = true;
            pictureBox1.SizeMode = PictureBoxSizeMode.AutoSize;


        }

        private void pictureBox1_Click_1(object sender, EventArgs e)
        {
            int x, y;
            var mouseArgs = (MouseEventArgs)e;

            x = mouseArgs.X;
            y = mouseArgs.Y;

            richTextBox1.Text = x.ToString() + "," + y.ToString() + "\n";
        }


        private void button7_Click(object sender, EventArgs e)    //finding exact centers of all circles
        {
            int meanx, meany ;
            int count;
            int x, y;
            int a=0;
            int m, n;
            int x1, y1;
            int xa, ya;
            for (m = 0; m < centers_found; m++)
            {
                count = 0;
                x = centers[m, 0];
                y = centers[m, 1];
                xa = x;
                ya = y;

                for (n = 1; n < centers_found; n++)
                {
                    x1 = centers[n, 0];
                    y1 = centers[n, 1];
                    if (((x > x1 && (x1 + rad) > x) || (x > (x1 - rad)) && (x1 + rad) > x) && ((y > y1 && (y1 + rad) > y) || (y > (y1 - rad)) && (y1 + rad) > y))   // = is removed
                    {
                        count++;
                        xa = xa + x1;
                        ya = ya + y1;

                        centers[n, 0] = 0;
                        centers[n, 1] = 0;
                    }

                }
                meanx = xa / (count+1);
                meany = ya / (count+1);
                if (meanx!=0 && meany!=0)
                {
                    centers_final[m, 0] = meanx;
                    centers_final[m, 1] = meany;
                    listBox2.Items.Add(centers_final[m,0]+","+centers_final[m,1]);
                    no_of_circles++;
                }
            }
            MessageBox.Show("Number Of Circles = " + no_of_circles.ToString());

            int p;
            string a0;
            string[] piece;
            for (p = 0; p < no_of_circles; p++)
            {
                listBox2.SelectedIndex = p;
                a0 = listBox2.SelectedItem.ToString();
                piece = a0.Split(',');
                //MessageBox.Show(piece[0].ToString());
                //MessageBox.Show(piece[1].ToString());
                centers_final[p, 0] = int.Parse(piece[0]);
                centers_final[p, 1] = int.Parse(piece[1]);
                //listBox2.Items.Add(piece[0].ToString());

            }
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {


        }
        private void listBox2_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        void save(int m)
        {
            OleDbConnection con = new OleDbConnection();
            string constring = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=centers.accdb";
            con.ConnectionString = constring;
            con.Open();
            StringBuilder stb = new StringBuilder();

            stb.Append("INSERT into Table1 (x_point,y_point) " + " VALUES ('" + centers_final[m, 0] + "','" + centers_final[m, 1] + "')");

            //MessageBox.Show(stb.ToString());
            OleDbCommand cmd = con.CreateCommand();
            cmd.CommandText = stb.ToString();
            cmd.CommandType = CommandType.Text;
            cmd.ExecuteNonQuery();
            cmd.Dispose();
            con.Close();
            
        }

        private void button8_Click(object sender, EventArgs e)          // saving
        {
            int m;
            for (m = 0; m < no_of_circles; m++)
            {
                save(m);
            }
            
            MessageBox.Show("Insert Query Run Success Fully");
        }

        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {

        }

        void assigning_to_datagrid()
        {
            string connString = "Provider=Microsoft.ACE.OLEDB.12.0;data source=centers.accdb";
            DataTable results = new DataTable();
            using (OleDbConnection conn = new OleDbConnection(connString))
            {
                OleDbCommand cmd = new OleDbCommand("SELECT * FROM Table1", conn);
                conn.Open();
                OleDbDataAdapter adapter = new OleDbDataAdapter(cmd);
                adapter.Fill(results);
            }
            dataGridView1.DataSource = results;
        }

        private void button1_Click(object sender, EventArgs e)      // assigning
        {
            assigning_to_datagrid();
            int l=0;
            try
            {
                while (true)
                {
                    centers_final[l, 0] = int.Parse(dataGridView1[1, l].Value.ToString());
                    centers_final[l, 1] = int.Parse(dataGridView1[2, l].Value.ToString());
                    //MessageBox.Show(centers_final[l, 0].ToString()+","+centers_final[l,1].ToString());
                    l++;
                }
            }
            catch       // when datagrid view ends its comes out of while
            {
                no_of_circles = l;
                MessageBox.Show("assigned to 2d array");
                MessageBox.Show("no of circles = "+no_of_circles.ToString());
            }

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
           

        }

        private void button2_Click(object sender, EventArgs e)      // checking answers
        {




        }
        
    }
}
