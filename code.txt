public SerialPort OpenPort(string p_strPortName,
       int p_uBaudRate, int p_uDataBits, 
       int p_uReadTimeout, int p_uWriteTimeout)
{
    receiveNow = new AutoResetEvent(false);
    SerialPort port = new SerialPort();

    try
    {
        port.PortName = p_strPortName;                 //COM1
        port.BaudRate = p_uBaudRate;                   //9600
        port.DataBits = p_uDataBits;                   //8
        port.StopBits = StopBits.One;                  //1
        port.Parity = Parity.None;                     //None
        port.ReadTimeout = p_uReadTimeout;             //300
        port.WriteTimeout = p_uWriteTimeout;           //300
        port.Encoding = Encoding.GetEncoding("iso-8859-1");
        port.DataReceived += new SerialDataReceivedEventHandler
                (port_DataReceived);
        port.Open();
        port.DtrEnable = true;
        port.RtsEnable = true;
    }
    catch (Exception ex)
    {
        throw ex;
    }
    return port;
}
SEND SMS
public bool sendMsg(SerialPort port, string PhoneNo, string Message)
{
    bool isSend = false;

    try
    {
        string recievedData = ExecCommand(port,"AT", 300, "No phone connected");
        recievedData = ExecCommand(port,"AT+CMGF=1", 300,
            "Failed to set message format.");
        String command = "AT+CMGS=\"" + PhoneNo + "\"";
        recievedData = ExecCommand(port,command, 300,
            "Failed to accept phoneNo");
        command = Message + char.ConvertFromUtf32(26) + "\r";
        recievedData = ExecCommand(port,command, 3000,
            "Failed to send message"); //3 seconds
        if (recievedData.EndsWith("\r\nOK\r\n"))
        {
            isSend = true;
        }
        else if (recievedData.Contains("ERROR"))
        {
            isSend = false;
        }
        return isSend;
    }
    catch (Exception ex)
    {
        throw new Exception(ex.Message);
    }
READ SMS
public ShortMessageCollection ReadSMS(SerialPort port)
{
    // Set up the phone and read the messages
    ShortMessageCollection messages = null;
    try
    {
        #region Execute Command
        // Check connection
        ExecCommand(port,"AT", 300, "No phone connected");
        // Use message format "Text mode"
        ExecCommand(port,"AT+CMGF=1", 300, "Failed to set message format.");
        // Use character set "PCCP437"
        ExecCommand(port,"AT+CSCS=\"PCCP437\"", 300,
        "Failed to set character set.");
        // Select SIM storage
        ExecCommand(port,"AT+CPMS=\"SM\"", 300,
        "Failed to select message storage.");
        // Read the messages
        string input = ExecCommand(port,"AT+CMGL=\"ALL\"", 5000,
            "Failed to read the messages.");
        #endregion

        #region Parse messages
        messages = ParseMessages(input);
        #endregion
    }
    catch (Exception ex)
    {
        throw new Exception(ex.Message);
    }

    if (messages != null)
        return messages;
    else
        return null;
}